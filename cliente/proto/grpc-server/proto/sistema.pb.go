// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: sistema.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mensaje para solicitar unirse a la cola
type PlayerInfoRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlayerId           string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameModePreference string                 `protobuf:"bytes,2,opt,name=game_mode_preference,json=gameModePreference,proto3" json:"game_mode_preference,omitempty"`
	RelojVectorial     map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Incluir reloj vectorial
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PlayerInfoRequest) Reset() {
	*x = PlayerInfoRequest{}
	mi := &file_sistema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfoRequest) ProtoMessage() {}

func (x *PlayerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfoRequest.ProtoReflect.Descriptor instead.
func (*PlayerInfoRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerInfoRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerInfoRequest) GetGameModePreference() string {
	if x != nil {
		return x.GameModePreference
	}
	return ""
}

func (x *PlayerInfoRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Mensaje de respuesta al unirse a cola
type QueuePlayerResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StatusCode     int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 0 = éxito, otro valor = fallo
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Incluir reloj vectorial
	PartidaId      string                 `protobuf:"bytes,4,opt,name=partida_id,json=partidaId,proto3" json:"partida_id,omitempty"`                                                                                           // ID de la partida asignada
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueuePlayerResponse) Reset() {
	*x = QueuePlayerResponse{}
	mi := &file_sistema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePlayerResponse) ProtoMessage() {}

func (x *QueuePlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePlayerResponse.ProtoReflect.Descriptor instead.
func (*QueuePlayerResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{1}
}

func (x *QueuePlayerResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *QueuePlayerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueuePlayerResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *QueuePlayerResponse) GetPartidaId() string {
	if x != nil {
		return x.PartidaId
	}
	return ""
}

// Mensaje para solicitar estado del jugador
type PlayerStatusRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PlayerId       string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,2,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Incluir reloj vectorial
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerStatusRequest) Reset() {
	*x = PlayerStatusRequest{}
	mi := &file_sistema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusRequest) ProtoMessage() {}

func (x *PlayerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusRequest.ProtoReflect.Descriptor instead.
func (*PlayerStatusRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerStatusRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerStatusRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Mensaje de respuesta con estado del jugador
type PlayerStatusResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PlayerStatus   string                 `protobuf:"bytes,1,opt,name=player_status,json=playerStatus,proto3" json:"player_status,omitempty"`                                                                                  // "IDLE", "IN_QUEUE", "IN_MATCH", "MATCH_COMPLETED"
	PartidaId      string                 `protobuf:"bytes,2,opt,name=partida_id,json=partidaId,proto3" json:"partida_id,omitempty"`                                                                                           // ID de la partida si está en una
	Partidas       []*Partida             `protobuf:"bytes,3,rep,name=partidas,proto3" json:"partidas,omitempty"`                                                                                                              // Lista de partidas (para consultas de estado)
	RelojVectorial map[string]int32       `protobuf:"bytes,4,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Incluir reloj vectorial
	Mensaje        string                 `protobuf:"bytes,5,opt,name=mensaje,proto3" json:"mensaje,omitempty"`                                                                                                                // Mensaje informativo adicional
	Ganador        string                 `protobuf:"bytes,6,opt,name=ganador,proto3" json:"ganador,omitempty"`                                                                                                                // Si ha ganado
	Perdedor       string                 `protobuf:"bytes,7,opt,name=perdedor,proto3" json:"perdedor,omitempty"`                                                                                                              // Si ha perdido
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerStatusResponse) Reset() {
	*x = PlayerStatusResponse{}
	mi := &file_sistema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusResponse) ProtoMessage() {}

func (x *PlayerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatusResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerStatusResponse) GetPlayerStatus() string {
	if x != nil {
		return x.PlayerStatus
	}
	return ""
}

func (x *PlayerStatusResponse) GetPartidaId() string {
	if x != nil {
		return x.PartidaId
	}
	return ""
}

func (x *PlayerStatusResponse) GetPartidas() []*Partida {
	if x != nil {
		return x.Partidas
	}
	return nil
}

func (x *PlayerStatusResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *PlayerStatusResponse) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

func (x *PlayerStatusResponse) GetGanador() string {
	if x != nil {
		return x.Ganador
	}
	return ""
}

func (x *PlayerStatusResponse) GetPerdedor() string {
	if x != nil {
		return x.Perdedor
	}
	return ""
}

// Mensaje para sincronización de relojes
type SincronizacionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IdCliente      string                 `protobuf:"bytes,1,opt,name=id_cliente,json=idCliente,proto3" json:"id_cliente,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,2,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SincronizacionRequest) Reset() {
	*x = SincronizacionRequest{}
	mi := &file_sistema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SincronizacionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SincronizacionRequest) ProtoMessage() {}

func (x *SincronizacionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SincronizacionRequest.ProtoReflect.Descriptor instead.
func (*SincronizacionRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{4}
}

func (x *SincronizacionRequest) GetIdCliente() string {
	if x != nil {
		return x.IdCliente
	}
	return ""
}

func (x *SincronizacionRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Respuesta de sincronización
type SincronizacionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RelojVectorial map[string]int32       `protobuf:"bytes,1,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Exito          bool                   `protobuf:"varint,2,opt,name=exito,proto3" json:"exito,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SincronizacionResponse) Reset() {
	*x = SincronizacionResponse{}
	mi := &file_sistema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SincronizacionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SincronizacionResponse) ProtoMessage() {}

func (x *SincronizacionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SincronizacionResponse.ProtoReflect.Descriptor instead.
func (*SincronizacionResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{5}
}

func (x *SincronizacionResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *SincronizacionResponse) GetExito() bool {
	if x != nil {
		return x.Exito
	}
	return false
}

// Mensaje para representar una partida
type Partida struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Clientes      []string               `protobuf:"bytes,2,rep,name=clientes,proto3" json:"clientes,omitempty"`
	Llena         bool                   `protobuf:"varint,3,opt,name=llena,proto3" json:"llena,omitempty"`
	Estado        string                 `protobuf:"bytes,4,opt,name=estado,proto3" json:"estado,omitempty"`     // Estado de la partida (Esperando, En curso, Finalizada)
	Ganador       string                 `protobuf:"bytes,5,opt,name=ganador,proto3" json:"ganador,omitempty"`   // Ganador de la partida (si está finalizada)
	Perdedor      string                 `protobuf:"bytes,6,opt,name=perdedor,proto3" json:"perdedor,omitempty"` // Perdedor de la partida (si está finalizada)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Partida) Reset() {
	*x = Partida{}
	mi := &file_sistema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Partida) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partida) ProtoMessage() {}

func (x *Partida) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partida.ProtoReflect.Descriptor instead.
func (*Partida) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{6}
}

func (x *Partida) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Partida) GetClientes() []string {
	if x != nil {
		return x.Clientes
	}
	return nil
}

func (x *Partida) GetLlena() bool {
	if x != nil {
		return x.Llena
	}
	return false
}

func (x *Partida) GetEstado() string {
	if x != nil {
		return x.Estado
	}
	return ""
}

func (x *Partida) GetGanador() string {
	if x != nil {
		return x.Ganador
	}
	return ""
}

func (x *Partida) GetPerdedor() string {
	if x != nil {
		return x.Perdedor
	}
	return ""
}

// Añade estas definiciones a sistema.proto para mantener compatibilidad
type ConexionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Mensaje        string                 `protobuf:"bytes,1,opt,name=mensaje,proto3" json:"mensaje,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,2,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConexionRequest) Reset() {
	*x = ConexionRequest{}
	mi := &file_sistema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConexionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConexionRequest) ProtoMessage() {}

func (x *ConexionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConexionRequest.ProtoReflect.Descriptor instead.
func (*ConexionRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{7}
}

func (x *ConexionRequest) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

func (x *ConexionRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

type ConexionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Mensaje        string                 `protobuf:"bytes,1,opt,name=mensaje,proto3" json:"mensaje,omitempty"`
	Exito          bool                   `protobuf:"varint,2,opt,name=exito,proto3" json:"exito,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Partidas       []*Partida             `protobuf:"bytes,4,rep,name=partidas,proto3" json:"partidas,omitempty"`
	PartidaId      string                 `protobuf:"bytes,5,opt,name=partida_id,json=partidaId,proto3" json:"partida_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConexionResponse) Reset() {
	*x = ConexionResponse{}
	mi := &file_sistema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConexionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConexionResponse) ProtoMessage() {}

func (x *ConexionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConexionResponse.ProtoReflect.Descriptor instead.
func (*ConexionResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{8}
}

func (x *ConexionResponse) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

func (x *ConexionResponse) GetExito() bool {
	if x != nil {
		return x.Exito
	}
	return false
}

func (x *ConexionResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *ConexionResponse) GetPartidas() []*Partida {
	if x != nil {
		return x.Partidas
	}
	return nil
}

func (x *ConexionResponse) GetPartidaId() string {
	if x != nil {
		return x.PartidaId
	}
	return ""
}

var File_sistema_proto protoreflect.FileDescriptor

const file_sistema_proto_rawDesc = "" +
	"\n" +
	"\rsistema.proto\x12\asistema\"\xfe\x01\n" +
	"\x11PlayerInfoRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x120\n" +
	"\x14game_mode_preference\x18\x02 \x01(\tR\x12gameModePreference\x12W\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v2..sistema.PlayerInfoRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x8d\x02\n" +
	"\x13QueuePlayerResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12Y\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v20.sistema.QueuePlayerResponse.RelojVectorialEntryR\x0erelojVectorial\x12\x1d\n" +
	"\n" +
	"partida_id\x18\x04 \x01(\tR\tpartidaId\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xd0\x01\n" +
	"\x13PlayerStatusRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12Y\n" +
	"\x0freloj_vectorial\x18\x02 \x03(\v20.sistema.PlayerStatusRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xf7\x02\n" +
	"\x14PlayerStatusResponse\x12#\n" +
	"\rplayer_status\x18\x01 \x01(\tR\fplayerStatus\x12\x1d\n" +
	"\n" +
	"partida_id\x18\x02 \x01(\tR\tpartidaId\x12,\n" +
	"\bpartidas\x18\x03 \x03(\v2\x10.sistema.PartidaR\bpartidas\x12Z\n" +
	"\x0freloj_vectorial\x18\x04 \x03(\v21.sistema.PlayerStatusResponse.RelojVectorialEntryR\x0erelojVectorial\x12\x18\n" +
	"\amensaje\x18\x05 \x01(\tR\amensaje\x12\x18\n" +
	"\aganador\x18\x06 \x01(\tR\aganador\x12\x1a\n" +
	"\bperdedor\x18\a \x01(\tR\bperdedor\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xd6\x01\n" +
	"\x15SincronizacionRequest\x12\x1d\n" +
	"\n" +
	"id_cliente\x18\x01 \x01(\tR\tidCliente\x12[\n" +
	"\x0freloj_vectorial\x18\x02 \x03(\v22.sistema.SincronizacionRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xcf\x01\n" +
	"\x16SincronizacionResponse\x12\\\n" +
	"\x0freloj_vectorial\x18\x01 \x03(\v23.sistema.SincronizacionResponse.RelojVectorialEntryR\x0erelojVectorial\x12\x14\n" +
	"\x05exito\x18\x02 \x01(\bR\x05exito\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x99\x01\n" +
	"\aPartida\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bclientes\x18\x02 \x03(\tR\bclientes\x12\x14\n" +
	"\x05llena\x18\x03 \x01(\bR\x05llena\x12\x16\n" +
	"\x06estado\x18\x04 \x01(\tR\x06estado\x12\x18\n" +
	"\aganador\x18\x05 \x01(\tR\aganador\x12\x1a\n" +
	"\bperdedor\x18\x06 \x01(\tR\bperdedor\"\xc5\x01\n" +
	"\x0fConexionRequest\x12\x18\n" +
	"\amensaje\x18\x01 \x01(\tR\amensaje\x12U\n" +
	"\x0freloj_vectorial\x18\x02 \x03(\v2,.sistema.ConexionRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xaa\x02\n" +
	"\x10ConexionResponse\x12\x18\n" +
	"\amensaje\x18\x01 \x01(\tR\amensaje\x12\x14\n" +
	"\x05exito\x18\x02 \x01(\bR\x05exito\x12V\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v2-.sistema.ConexionResponse.RelojVectorialEntryR\x0erelojVectorial\x12,\n" +
	"\bpartidas\x18\x04 \x03(\v2\x10.sistema.PartidaR\bpartidas\x12\x1d\n" +
	"\n" +
	"partida_id\x18\x05 \x01(\tR\tpartidaId\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x012\x80\x02\n" +
	"\n" +
	"Matchmaker\x12I\n" +
	"\vQueuePlayer\x12\x1a.sistema.PlayerInfoRequest\x1a\x1c.sistema.QueuePlayerResponse\"\x00\x12P\n" +
	"\x0fGetPlayerStatus\x12\x1c.sistema.PlayerStatusRequest\x1a\x1d.sistema.PlayerStatusResponse\"\x00\x12U\n" +
	"\x10SincronizarReloj\x12\x1e.sistema.SincronizacionRequest\x1a\x1f.sistema.SincronizacionResponse\"\x00B\x13Z\x11grpc-server/protob\x06proto3"

var (
	file_sistema_proto_rawDescOnce sync.Once
	file_sistema_proto_rawDescData []byte
)

func file_sistema_proto_rawDescGZIP() []byte {
	file_sistema_proto_rawDescOnce.Do(func() {
		file_sistema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sistema_proto_rawDesc), len(file_sistema_proto_rawDesc)))
	})
	return file_sistema_proto_rawDescData
}

var file_sistema_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_sistema_proto_goTypes = []any{
	(*PlayerInfoRequest)(nil),      // 0: sistema.PlayerInfoRequest
	(*QueuePlayerResponse)(nil),    // 1: sistema.QueuePlayerResponse
	(*PlayerStatusRequest)(nil),    // 2: sistema.PlayerStatusRequest
	(*PlayerStatusResponse)(nil),   // 3: sistema.PlayerStatusResponse
	(*SincronizacionRequest)(nil),  // 4: sistema.SincronizacionRequest
	(*SincronizacionResponse)(nil), // 5: sistema.SincronizacionResponse
	(*Partida)(nil),                // 6: sistema.Partida
	(*ConexionRequest)(nil),        // 7: sistema.ConexionRequest
	(*ConexionResponse)(nil),       // 8: sistema.ConexionResponse
	nil,                            // 9: sistema.PlayerInfoRequest.RelojVectorialEntry
	nil,                            // 10: sistema.QueuePlayerResponse.RelojVectorialEntry
	nil,                            // 11: sistema.PlayerStatusRequest.RelojVectorialEntry
	nil,                            // 12: sistema.PlayerStatusResponse.RelojVectorialEntry
	nil,                            // 13: sistema.SincronizacionRequest.RelojVectorialEntry
	nil,                            // 14: sistema.SincronizacionResponse.RelojVectorialEntry
	nil,                            // 15: sistema.ConexionRequest.RelojVectorialEntry
	nil,                            // 16: sistema.ConexionResponse.RelojVectorialEntry
}
var file_sistema_proto_depIdxs = []int32{
	9,  // 0: sistema.PlayerInfoRequest.reloj_vectorial:type_name -> sistema.PlayerInfoRequest.RelojVectorialEntry
	10, // 1: sistema.QueuePlayerResponse.reloj_vectorial:type_name -> sistema.QueuePlayerResponse.RelojVectorialEntry
	11, // 2: sistema.PlayerStatusRequest.reloj_vectorial:type_name -> sistema.PlayerStatusRequest.RelojVectorialEntry
	6,  // 3: sistema.PlayerStatusResponse.partidas:type_name -> sistema.Partida
	12, // 4: sistema.PlayerStatusResponse.reloj_vectorial:type_name -> sistema.PlayerStatusResponse.RelojVectorialEntry
	13, // 5: sistema.SincronizacionRequest.reloj_vectorial:type_name -> sistema.SincronizacionRequest.RelojVectorialEntry
	14, // 6: sistema.SincronizacionResponse.reloj_vectorial:type_name -> sistema.SincronizacionResponse.RelojVectorialEntry
	15, // 7: sistema.ConexionRequest.reloj_vectorial:type_name -> sistema.ConexionRequest.RelojVectorialEntry
	16, // 8: sistema.ConexionResponse.reloj_vectorial:type_name -> sistema.ConexionResponse.RelojVectorialEntry
	6,  // 9: sistema.ConexionResponse.partidas:type_name -> sistema.Partida
	0,  // 10: sistema.Matchmaker.QueuePlayer:input_type -> sistema.PlayerInfoRequest
	2,  // 11: sistema.Matchmaker.GetPlayerStatus:input_type -> sistema.PlayerStatusRequest
	4,  // 12: sistema.Matchmaker.SincronizarReloj:input_type -> sistema.SincronizacionRequest
	1,  // 13: sistema.Matchmaker.QueuePlayer:output_type -> sistema.QueuePlayerResponse
	3,  // 14: sistema.Matchmaker.GetPlayerStatus:output_type -> sistema.PlayerStatusResponse
	5,  // 15: sistema.Matchmaker.SincronizarReloj:output_type -> sistema.SincronizacionResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sistema_proto_init() }
func file_sistema_proto_init() {
	if File_sistema_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sistema_proto_rawDesc), len(file_sistema_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sistema_proto_goTypes,
		DependencyIndexes: file_sistema_proto_depIdxs,
		MessageInfos:      file_sistema_proto_msgTypes,
	}.Build()
	File_sistema_proto = out.File
	file_sistema_proto_goTypes = nil
	file_sistema_proto_depIdxs = nil
}
