syntax = "proto3";
option go_package = "grpc-server/proto";
package sistema;

// Servicio para el matchmaker
service Matchmaker {
  // Método para unirse a la cola de emparejamiento
  rpc QueuePlayer (PlayerInfoRequest) returns (QueuePlayerResponse) {}
  
  // Método para consultar el estado actual del jugador
  rpc GetPlayerStatus (PlayerStatusRequest) returns (PlayerStatusResponse) {}
  
  // Método para sincronizar relojes vectoriales (mantener consistencia eventual)
  rpc SincronizarReloj (SincronizacionRequest) returns (SincronizacionResponse) {}
}

// Mensaje para solicitar unirse a la cola
message PlayerInfoRequest {
  string player_id = 1;
  string game_mode_preference = 2;
  map<string, int32> reloj_vectorial = 3; // Incluir reloj vectorial
}

// Mensaje de respuesta al unirse a cola
message QueuePlayerResponse {
  int32 status_code = 1; // 0 = éxito, otro valor = fallo
  string message = 2;
  map<string, int32> reloj_vectorial = 3; // Incluir reloj vectorial
  string partida_id = 4; // ID de la partida asignada
}

// Mensaje para solicitar estado del jugador
message PlayerStatusRequest {
  string player_id = 1;
  map<string, int32> reloj_vectorial = 2; // Incluir reloj vectorial
}

// Mensaje de respuesta con estado del jugador
message PlayerStatusResponse {
  string player_status = 1; // "IDLE", "IN_QUEUE", "IN_MATCH", "MATCH_COMPLETED"
  string partida_id = 2;    // ID de la partida si está en una
  repeated Partida partidas = 3; // Lista de partidas (para consultas de estado)
  map<string, int32> reloj_vectorial = 4; // Incluir reloj vectorial
  string mensaje = 5; // Mensaje informativo adicional
  string ganador = 6; // Si ha ganado
  string perdedor = 7; // Si ha perdido
}

// Mensaje para sincronización de relojes
message SincronizacionRequest {
  string id_cliente = 1;
  map<string, int32> reloj_vectorial = 2;
}

// Respuesta de sincronización
message SincronizacionResponse {
  map<string, int32> reloj_vectorial = 1;
  bool exito = 2;
}

// Mensaje para representar una partida
message Partida {
  string id = 1;
  repeated string clientes = 2;
  bool llena = 3;
  string estado = 4; // Estado de la partida (Esperando, En curso, Finalizada)
  string ganador = 5; // Ganador de la partida (si está finalizada)
  string perdedor = 6; // Perdedor de la partida (si está finalizada)
}

// Añade estas definiciones a sistema.proto para mantener compatibilidad
message ConexionRequest {
  string mensaje = 1;
  map<string, int32> reloj_vectorial = 2;
}

message ConexionResponse {
  string mensaje = 1;
  bool exito = 2;
  map<string, int32> reloj_vectorial = 3;
  repeated Partida partidas = 4;
  string partida_id = 5;
}